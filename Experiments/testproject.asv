%This function 
file_name = 'alto saxophone.mp3';
epsilon = 1e-5;
file_music_segments = '28667_segment.txt';
[y,Fs]=audioread(file_name);
SAMPLES_PER_FRAME = 4096;
disp('Reading a sample audio file..');

% Downmix the signal if it is 2 channel
[~,n] = size(y);
if(n==2)
    stereo_to_mono = (y(:,1)+y(:,2))/2;
end
% Normalize the audio signal 
stereo_to_mono = stereo_to_mono/max(stereo_to_mono);

length_mono = length(stereo_to_mono);
segments=floor(length_mono/(SAMPLES_PER_FRAME));

%Calculate the number of samples in the frame now
i=1;
last_sample=segments*SAMPLES_PER_FRAME;
spectral_centroid_vector=zeros(segments+1,3);
rms_feature_vector=zeros(segments+1,3);
for k=1:SAMPLES_PER_FRAME:last_sample    
    if (k+SAMPLES_PER_FRAME)< length_mono
        samples = k:k+SAMPLES_PER_FRAME;
    else
        samples = k:length_mono;
    end
    rms_value = rms(stereo_to_mono(samples));
    if rms_value < epsilon
        continue;
    end
    rms_feature_vector(i)=rms(stereo_to_mono(samples));
    rms_feature_vector(i,2)=k;
    y = fft(stereo_to_mono(samples));
    for l=1:SAMPLES_PER_FRAME
        sum_freq = (l-1)*abs(y(l));
    end
    sum_y = sum(abs(y));
    spectral_centroid_vector(i)= sum_freq/sum_y;
    spectral_centroid_vector(i,2)=k;
    i=i+1;
end


%rms_feature_vector = rms_feature_vector(rms_feature_vector~=0);
rms_audio_music_values = rangeMusicValues(file_music_segments,rms_feature_vector,Fs);
audio_music_values = rangeMusicValues(file_music_segments,spectral_centroid_vector,Fs);
%length_rms = length(audio_music_values);


rms_audio_vector = rms_audio_music_values(rms_audio_music_values(:,3)==0,1);
rms_music_vector = rms_audio_music_values(rms_audio_music_values(:,3)==1,1);
%Find the values of music and speech 
centroid_audio_vector = audio_music_values(audio_music_values(:,3)==0,1);
centroid_music_vector = audio_music_values(audio_music_values(:,3)==1,1);


%Convert to db
% epsilon = power(10,-15);
% for i=1:length(rms_audio_vector)
%     if(rms_audio_vector(i) < epsilon)
%          rms_audio_vector(i) = rms_audio_vector(i) + epsilon;
%     end
% end    
% rms_audio_vector = mag2db(rms_audio_vector);
% 
% %Convert music vector to DB
% for i=1:length(rms_music_vector)
%     if(rms_music_vector(i) < epsilon)
%          rms_music_vector(i) = rms_music_vector(i) + epsilon;
%     end
% end    
% rms_music_vector = mag2db(rms_music_vector);
% 
% rms_audio_vector = rms_audio_vector(rms_audio_vector~=-300);
% rms_music_vector = rms_music_vector(rms_audio_vector~=-300);
% figure;
%histogram(centroid_audio_vector,'Normalization','probability','Binwidth',100,'FaceColor','red');hold on;
%histogram(centroid_music_vector,'Normalization','probability','BinWidth',100,'Facecolor',[0 1 0]);hold on;
%xlabel('Centroid Value');ylabel('Probability');
%legend('Speech','Music');
%audio_points = linspace(0,length(centroid_audio_vector),length(centroid_audio_vector));
%music_points = linspace(0,length(centroid_music_vector),length(centroid_music_vector));
%audio_points = audio_points';
%music_points = music_points';
%Plot scatter plots for the points
rms_audio_vector = rms_audio_vector(rms_audio_vector~=0);
centroid_audio_vector = centroid_audio_vector(centroid_audio_vector~=0);
rms_audio_vector = mag2db(rms_audio_vector);
rms_music_vector = mag2db(rms_music_vector);
classification_group = zeros(length(rms_audio_music_values),1);
for k =1:length(rms_audio_vector)
    resultant_feature_vector(k,:) = [rms_audio_vector(k) centroid_audio_vector(k)];
    classification_group(k) = 1;
end
m=1;
for s = 1 :9: length(rms_music_vector)
    resultant_feature_vector(k+m,:) = [rms_music_vector(s) centroid_music_vector(s)];
    classification_group(k+m) = 2;
    m= m+1;
end

%Shuffle the resultant data
resultant_feature_vector = zscore(resultant_feature_vector);
shuffled_index = randperm(length(resultant_feature_vector));
shuffled_data = resultant_feature_vector(shuffled_index,:);
shuffled_class = classification_group(shuffled_index,:);
%wrong_data = myImprovedCrossValidator(shuffled_data,shuffled_class,10);
%disp('Percentage accuracy');
%[m,~] = size(shuffled_data);
%disp(((m-wrong_data)/m)*100);
% scatter(rms_audio_vector,centroid_audio_vector,'g');hold on;
% scatter(rms_music_vector,centroid_music_vector,'r');hold off;

%Train and test it using kNN
disp('Matlab percentage accuracy')
model = fitcknn(shuffled_data,shuffled_class,'NumNeighbors',9);
cvmodel = crossval(model);
loss = kfoldLoss(cvmodel);
disp(100-100*loss);
